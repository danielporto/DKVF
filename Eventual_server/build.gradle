plugins {
    id 'application'
    id 'java'
    id 'idea'
}

mainClassName = 'edu.msu.cse.eventual.server.MainClass'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'
description = "Eventual consistency server implementation"

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}


compileJava{}

jar {
    manifest {
        attributes ( 'Main-Class': mainClassName,
                'Implementation-Title': project.description,
                'Implementation-Version': project.version
        )
    }
    archiveBaseName = project.name + '-all'
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
    //with jar
}


dependencies {
    implementation files('../libs/Berkeley-DB/je-6.4.25.jar')
    implementation files('../libs/Protobuf/jaxb-api-2.3.1.wso2v2.jar')
    implementation files('../libs/Protobuf/protobuf-java-3.4.0.jar')
    implementation files('../libs/YCSB/htrace-core4-4.1.0-incubating.jar')
    implementation files('../libs/YCSB/HdrHistogram-2.1.4.jar')
    implementation files('../libs/YCSB/core-0.14.0-SNAPSHOT.jar')
    implementation files('../libs/YCSB/jackson-core-asl-1.9.4.jar')
    implementation files('../libs/YCSB/jackson-mapper-asl-1.9.13.jar')
    // implementation project(':DKVF_core')
}


task import_dkvf_core {
    copy {
        from('../DKVF_core/src')
        into('src')
    }
}

task clean_core_files {
    def core_root = file("../DKVF_core").canonicalPath
    def core_files = fileTree("../DKVF_core").filter { it.isFile()}.files.canonicalPath
//    println(core_root)
//    core_files.each { s -> println(s)}
    def core_files_relative_path = core_files.collect { el -> el.replace(core_root+"/","")}
    println(core_files_relative_path)
    delete(files(core_files_relative_path))

    //now delete empty dirs
    def emptyDirs = []
    fileTree(".").visit {
        def File f = it.file
        if (f.isDirectory() ) {
            def children = project.fileTree(f).filter { it.isFile() }.files
            if (children.size() == 0) {
                emptyDirs << f
            }
        }
    }
    // reverse so that we do the deepest folders first
    emptyDirs.reverseEach { it.delete() }
}

compileJava {
    dependsOn import_dkvf_core
}

clean {
    dependsOn clean_core_files
}